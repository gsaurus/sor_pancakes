/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;





class Rgb{

	public int r;
	public int g;
	public int b;

	public String toString() {
		return r + " " + g + " " + b;
	}

    boolean isValid() {
        return r >= 0 && g >= 0 && b >= 0 && r <= 255 & g <= 255 & b <= 255;
    }
    
}



/**
 *
 * @author Gil
 */
public class Gui extends javax.swing.JFrame{

    /**
     * Creates new form Gui
     */
    public Gui() {
        initComponents();
        rgbField.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                rgbEntered();
            }
            public void removeUpdate(DocumentEvent e) {
                rgbEntered();
            }
            public void insertUpdate(DocumentEvent e) {
                rgbEntered();
            }
        });
        gensField.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                gensEntered();
            }
            public void removeUpdate(DocumentEvent e) {
                gensEntered();
            }
            public void insertUpdate(DocumentEvent e) {
                gensEntered();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        rgbField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        correctedField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        gensField = new javax.swing.JTextField();
        colorPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RGBGen");
        setLocationByPlatform(true);
        setName("guiFrame");
        setResizable(false);

        jLabel1.setText("Â© Gil Costa 2012");

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("RGB:");

        rgbField.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        rgbField.setText("255 255 255");

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Corrected RGB:");

        correctedField.setBackground(new java.awt.Color(255, 255, 204));
        correctedField.setEditable(false);
        correctedField.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        correctedField.setText("255 255 255");
        correctedField.setToolTipText("");
        correctedField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                correctedFieldMouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Genesis:");

        gensField.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        gensField.setText("0fff");

        colorPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout colorPanelLayout = new javax.swing.GroupLayout(colorPanel);
        colorPanel.setLayout(colorPanelLayout);
        colorPanelLayout.setHorizontalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        colorPanelLayout.setVerticalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 27, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rgbField, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(correctedField)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(gensField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addComponent(colorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(rgbField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(correctedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(gensField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void correctedFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_correctedFieldMouseClicked
//        correctedField.setSelectionStart(0);
//        correctedField.setSelectionEnd(correctedField.getText().length());
//        copyToClipBoard(correctedField.getText());
    }//GEN-LAST:event_correctedFieldMouseClicked

    
    private static void copyToClipBoard(String text) {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Clipboard clipboard = toolkit.getSystemClipboard();
        StringSelection selection = new StringSelection(text);
        clipboard.setContents(selection, null);
    }
    
    
    private void updateColor(Rgb rgb){
        Color color = new Color(rgb.r, rgb.g, rgb.b);
        colorPanel.setBackground(color);
        colorPanel.repaint();
    }
    
    private void rgbEntered(){
        try{
            String rgbText = rgbField.getText();
            Rgb rgb = toRgb(rgbText);
            if (rgb != null){
                rgbField.setBackground(Color.white);
                String gensText = rgbToGens(rgb);
                gensField.setText(gensText);
                correctedField.setText(gensToRGB(gensText).toString());
                updateColor(rgb);
            }else{
                rgbField.setBackground(Color.red);
            }
        }catch(Exception e){
            // just to prevent
        }
    }
    
    
    private void gensEntered(){
        try{
            String gensText = gensField.getText();
            gensText = gensText.toLowerCase();
            Rgb rgb = gensToRGB(gensText);
            if (rgb != null){
                gensField.setBackground(Color.white);
                rgbField.setText(rgb.toString());
                correctedField.setText(rgb.toString());
                updateColor(rgb);
            }else{
                gensField.setBackground(Color.red);
            }
        }catch(Exception e){
            // just to prevent
        }
    }
    
    private Rgb toRgb(String rgbInput){
        String[] tokens = rgbInput.split("\\s");
        if (tokens.length != 3) return null;
        Rgb rgb = new Rgb();
        try{
            rgb.r = Integer.parseInt(tokens[0]);
            rgb.g = Integer.parseInt(tokens[1]);
            rgb.b = Integer.parseInt(tokens[2]);
        }catch(Exception e){
            return null;
        }
        if (rgb.isValid() ) return rgb;
        else return null;
    }
    
    
    private static Rgb gensToRGB(String word) {
        if (word.length() != 4) return null;
        Rgb res = new Rgb();
        try{
            res.b = hexToVal(parseHex(word.charAt(1)));
            res.g = hexToVal(parseHex(word.charAt(2)));
            res.r = hexToVal(parseHex(word.charAt(3)));
        }catch (Exception e){
            return null;
        }
        return res;
    }

    private static int parseHex(char c) throws Exception {
        if (!(c >= '0' && c <= '9' || c >= 'a' && c <= 'f'))
            throw new RuntimeException();
        if (c >= 'a')
            return 10 + c - 'a';
        return c - '0';
    }

    private static String rgbToGens(Rgb rgb){
        char[] res = new char[4];
        res[0] = '0';
        res[1] = parseInt(valueToHex(rgb.b));
        res[2] = parseInt(valueToHex(rgb.g));
        res[3] = parseInt(valueToHex(rgb.r));
        return new String(res);
    }
    
    private static int valueToHex(int val) {
        return (val+8)/17;
    }
    
    private static int hexToVal(int val) {
        return val*17;
    }

    private static char parseInt(int value) {		
            if (value >= 10) return (char) ('a' + value-10);
            else return (char) ('0' + value);
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Gui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel colorPanel;
    private javax.swing.JTextField correctedField;
    private javax.swing.JTextField gensField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField rgbField;
    // End of variables declaration//GEN-END:variables
}
